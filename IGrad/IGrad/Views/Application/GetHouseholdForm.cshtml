@model IGrad.Models.User.UserModel
@{
    /**/

    ViewBag.Title = "GetHouseholdForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/jquery.unobtrusive-ajax.min.js" type="text/javascript"></script>
<script src="~/Scripts/application.js"></script>
<script type="text/javascript">
    $(document).on('change', '#lives-with-dropdown', function () {
        if ($('#lives-with-dropdown option:selected').val() == 'LivesWithOther') {
            showTarget('lives-with-other-desc');
        }
        else if ($('#lives-with-dropdown option:selected').val() == 'HomelessDistressed'){
            loadHomelessInfoForm();
        }
        else {
            $('#LivesWith_Other').val("");
            hideTarget('lives-with-other-desc');
            hideTarget('homeless-container');
        }
    })

    $(document).ready(function () {
        if ($('#lives-with-dropdown').val() == 'HomelessDistressed') {
            loadHomelessInfoForm();
        }
    });
</script>
@using (Html.BeginForm("GetHouseholdForm", "Application", FormMethod.Post, new { enctype = "multipart/form-data", @id = "household-form" }))
{
    <h2>Household Information</h2>
    <small class="form-text required-marker-indicator">* required fields.</small>
    <hr>

    <div class="" id="living-situation">
        <h3 class="bg-info">Household</h3>

        <!-- STUDENT LIVES WITH -->
        <h4 class="required-marker">Student lives with</h4>
        <div class="row">
            <div class="form-group col-md-4">
                @Html.DropDownListFor(model => model.LivesWith.StudentLivesWith, Model.LivesWith.LivesWithSelectList,"",new { @class = "form-control required-checker", required = "required", @id="lives-with-dropdown" })
            </div>
            <div class="form-group col-md-6 hidden" id="lives-with-other-desc">
                @Html.TextBoxFor(model => model.LivesWith.Other, new {@class="form-control" , @placeholder ="Explain Living Situation"})
            </div>
        </div>

        <input type="hidden" name="student-live-with" class="progressbar-checker" value="" />
        <!-- STUDENT LIVES WITH END -->

        <!-- TOTAL RESIDENCE AND INCOME -->
        <div class="row">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.LivesWith.TotalPeopleInResidence, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.LivesWith.TotalPeopleInResidence, "{0:#.#}", htmlAttributes: new { @class = "form-control", @placeholder = "Number of residence", required = "required" })
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.LivesWith.AnnualHouseHoldIncome, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.LivesWith.AnnualHouseHoldIncome, "{0:#.#}", htmlAttributes: new { @class = "form-control", @placeholder = "Income", required = "required" })
            </div>
        </div>
        <!-- TOTAL RESIDENCE AND INCOME END -->

        <!-- HOMELESS SECTION -->
        <div class="hidden" id="homeless-container">
            <h3 class="bg-info">
                Homeless Assistance Information
                <span data-toggle="tooltip" data-placement="right" title="In order to strengthen educational support for students who find themselves and their families in temporary
                    homeless circustances, the U.S. Federal Goverment has passed the McKinney-Vento Homless Assitance Act (42 U.S.C 11431). If you currently find yourself in any of the
                    situations described below, your child(ren) is/are entitled to assitance so that their schooling can continue. PLease complete the form below and return it to the 
                    school that your child(ren) is/are currently attending. The District Liaison will contact you." class="user-hint">
                    <i class="fas fa-info-circle"></i>
                </span>
            </h3>
            <button class="btn btn-default" form="" type="button" onclick="showTarget('homeless-information')">Show</button>
            <button class="btn btn-default" form="" type="button" onclick="hideTarget('homeless-information')">Hide</button>
            <div class="container" id="homeless-information">
                @{if (Model.HomelessAssistance != null)
                    {
                        Html.RenderPartial("_HomelessAssistanceForm", Model.HomelessAssistance);
                    }
                    else
                    {
                        @Html.Action("GetAddHomelessAssistanceForm", "Application");
                    }
                }
            </div>
        </div>
        <!-- HOMELESS SECTION END -->

        <br>
    
        <!-- PRIMARY ADDRESS -->
        <h3 class="bg-info">Residence Address</h3>
        <div class="row">
            <div class="form-group col-md-3">
                @Html.LabelFor(model => model.ResidentAddress.Street, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.ResidentAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "Street address", required = "required" })
            </div>
            <div class="form-group col-md-3">
                @Html.LabelFor(model => model.ResidentAddress.City, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.ResidentAddress.City, htmlAttributes: new { @class = "form-control", @placeholder = "City", required = "required" })
            </div>
            <div class="form-group col-md-2">
                @Html.LabelFor(model => model.ResidentAddress.State, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.ResidentAddress.State, htmlAttributes: new { @class = "form-control", @placeholder = "State", required = "required" })
            </div>
            <div class="form-group col-md-2">
                @Html.LabelFor(model => model.ResidentAddress.Zip, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.ResidentAddress.Zip, "{0:#.#}", new { @class = "form-control", @placeholder = "Zip", required = "required" })
                @Html.ValidationMessageFor(model => model.ResidentAddress.Zip, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-2">
                @Html.LabelFor(model => model.ResidentAddress.POBox, htmlAttributes: new { @class = "" })
                @Html.TextBoxFor(model => model.ResidentAddress.POBox, new { @class = "form-control", @placeholder = "PO" })
            </div>
        </div>

        <!-- IS SAME ADDRESS -->
        @Html.LabelFor(model => model.ResidentAddressIsMailingAddress, htmlAttributes: new { @class = "required-marker" })
        <div class="row">
            <div class="form-group col-md-12">
                @Html.RadioButtonFor(model => model.ResidentAddressIsMailingAddress, true, htmlAttributes: new { @class = "radio-checker", @onclick = "residentIsMailingAddress()" })Yes
                @Html.RadioButtonFor(model => model.ResidentAddressIsMailingAddress, false, htmlAttributes: new { @class = "radio-checker", @onclick = "residentIsMailingAddress()" })No
                @Html.HiddenFor(model => model.ResidentAddressIsMailingAddress, new { @class = "progressbar-checker" })
            </div>
        </div>

        <!-- MAILING ADDRESS -->
        <div class="hidden" id="mailing-address">
            <h4>Please Specify Mailing Address</h4>
            <div class="row">
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MailingAddress.Street, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.MailingAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "Street address" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MailingAddress.City, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.MailingAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "City" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.MailingAddress.State, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.MailingAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "State" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.MailingAddress.Zip, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.MailingAddress.Zip, "{0:#.#}", new { @class = "form-control", @placeholder = "Zip" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.MailingAddress.POBox, htmlAttributes: new { @class = "" })
                    @Html.TextBoxFor(model => model.MailingAddress.POBox, htmlAttributes: new { @class = "form-control", @placeholder = "PO Box" })
                </div>
            </div>
        </div>
    </div>
    <!-- PRIMARY ADDRESS END -->
}



<!-- ADDING GUARDIAN -->
<div id="add-primary-guardian-container">
    <h3 class="bg-info">Primary Household</h3>
    <h4 class="required-marker">Parent or Guardian where student lives.</h4>

    <!-- PRIMARY GUARDIAN -->
    <div class="" id="primary-guardians">
        <!-- guardians partial view here-->
        @{if (Model.Guardians != null)
            {
                Html.RenderPartial("_GetGuardianInfo", Model.Guardians.ToList(), new ViewDataDictionary { { "ResidenceType", "Primary" } });
            }
        }
    </div>

    <span class="text-warning hidden" id="primary-guardian-count-warning">Student may not have more than two primary guardians. Please remove a guardian to add a different one.</span>
    <button class="btn btn-success" id="add-primary-guardian-button" type="button" onclick="loadPrimaryGuardianInfoForm()">Add Parent/Guardian</button>

    <div class="hidden" id="add-primary-guardian">
        <!-- render by jquery -->
    </div>

    <input type="hidden" name="primary-guardian-selection" class="progressbar-checker" value="" />
</div>

<br />
<div class="" id="prompt-secondary-residence">
    <br />
    <!-- PROMPT FOR SECONDARY GUARDIAN -->
    <div class="container">
        <strong>Does the student have a parent/legal guardian not living at the address above?</strong>
        <button class="btn btn-primary" type="button" onclick="showTarget('secondary-residence-container')">Yes</button>
        <button class="btn btn-default" value="" type="button" onclick="hideTarget('prompt-secondary-residence')">No</button>
    </div>
    <br />

    <!-- SEONDARY GUARDIAN -->
    <div class="hidden secondary-section" id="secondary-residence-container">
        <h3 class="bg-info">Secondary Household</h3>

        <!-- ADD SECONDARY GUARDIAN -->
        <div class="" id="add-secondary-guardian-container">
            <h4 class="required-marker">Parent/guardian not living at the address above</h4>
            <div class="" id="secondary-guardians">
                <!-- guardians partial view here-->
                @{if (Model.Guardians != null)
                    {
                        Html.RenderPartial("_GetGuardianInfo", Model.Guardians.ToList(), new ViewDataDictionary { { "ResidenceType", "Secondary" } });
                    }
                }
            </div>

            <span class="text-warning hidden" id="secondary-guardian-count-warning"> Student may not have more than two secondary guardians. Please remove a guardian to add a different one.</span>
            <button class="btn btn-success" id="add-secondary-guardian-button" onclick="loadSecondaryGuardianInfoForm()">Add Parent/Guardian</button>

            <div class="hidden" id="add-secondary-guardian">
                <!-- form render by jquery -->
            </div>

            <input type="hidden" name="secondary-guardian-selection" class="progressbar-checker" value="" />
        </div>
        <br />
        <!-- SECONDARY GUARDIAN ADDRESS -->
        <div class="row">
            <div class="col-md-12">
                <h4>Please Specify Secondary Guardian(s) Address</h4>
            </div>
            <div class="form-group col-md-3">
                @Html.LabelFor(model => model.SecondaryHouseholdAddress.Street, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.SecondaryHouseholdAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "Street address", @form = "household-form" })
            </div>
            <div class="form-group col-md-3">
                @Html.LabelFor(model => model.SecondaryHouseholdAddress.City, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.SecondaryHouseholdAddress.City, htmlAttributes: new { @class = "form-control", @placeholder = "City", @form = "household-form" })
            </div>
            <div class="form-group col-md-2">
                @Html.LabelFor(model => model.SecondaryHouseholdAddress.State, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.SecondaryHouseholdAddress.State, htmlAttributes: new { @class = "form-control", @placeholder = "State", @form = "household-form" })
            </div>
            <div class="form-group col-md-2">
                @Html.LabelFor(model => model.SecondaryHouseholdAddress.Zip, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.SecondaryHouseholdAddress.Zip, "{0:#.#}", new { @class = "form-control", @placeholder = "Zip", @form = "household-form" })
                @Html.ValidationMessageFor(model => model.SecondaryHouseholdAddress.Zip, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-2">
                @Html.LabelFor(model => model.SecondaryHouseholdAddress.POBox, htmlAttributes: new { @class = "" })
                @Html.TextBoxFor(model => model.SecondaryHouseholdAddress.POBox, new { @class = "form-control", @placeholder = "PO", @form = "household-form" })
            </div>
        </div>
    </div>
</div>
<!-- ADD GUARDIANS END -->


<!-- ADD EMERGENCY CONTACT -->
<div class="wrapper" id="add-emergency-contact-container">
    <h3 class="bg-info">
        Emergency Contact Information
        <span data-toggle="tooltip" data-placement="right" title="When an emergency situation occurs involving your child, we want to be able
              to quickly reach responsible adults. In the event we cannot reach a parent/guardian, please list persons you trust who are available
              during the day to provide care for your child" class="user-hint">
            <i class="fas fa-info-circle"></i>
        </span>
    </h3>
    <h4 class="required-marker">List your emergency contacts</h4>
    <div class="" id="emergency-contacts">
        <!-- emergency partial view here-->
        @{if (Model.EmergencyContacts != null)
            {
                Html.RenderPartial("_GetEmergencyContacts", Model.EmergencyContacts.ToList());
            }
        }
    </div>

    <span class="text-warning hidden" id="emergency-count-warning"> Please list only three contacts maximum</span>
    <button class="btn btn-success" id="add-emergency-contact-button" onclick="loadEmergencyContactInfoForm()">Add Emergency Contact</button>

    <div class="hidden" id="add-emergency-contact">
        <!-- form render by jquery -->
    </div>

    <input type="hidden" name="emergency-selection" class="progressbar-checker" />
</div>
<!-- ADD EMERGENCY CONTACT END -->

<br />

<!-- ADD SIBLINGS -->
<div class="wrapper" id="add-sibling-container">
    <h3 class="bg-info">Siblings</h3>
    <h4>List of siblings</h4>
    <div class="siblings" id="siblings">
        <!-- sibling partial view here-->
        @{if (Model.Siblings != null)
            {
                Html.RenderPartial("_GetSiblingInfo", Model.Siblings.ToList());
            }
        }
    </div>

    <span class="text-warning hidden" id="sibling-count-warning"> Please list only five siblings maximum</span>
    <button class="btn btn-success" id="add-sibling-button" onclick="loadSiblingInfoForm()">Add Sibling</button>

    <div class="hidden" id="add-sibling">
        <!-- form render by jquery -->
    </div>
</div>
<!-- ADD SIBLINGS END -->

<br>

<div class="form-row">
    <hr>
    <div class="pull-right">
        <button class="btn btn-primary btn-lg btn-success" type="submit" form="household-form">
            Continue
            <i class="fas fa-caret-right"></i>
        </button>
    </div>
</div>

<!-- CUSTOM JS -->
<script type="text/javascript" src="~/Scripts/progress-bar.js"></script>
<script type="text/javascript" src="~/Scripts/household-form.js"></script>

<script type="text/javascript">
    /* LOAD FUNCTIONS */
    function loadPrimaryGuardianInfoForm() {
        var rowCount = $('#primary-guardians table tbody tr').length;
        if (rowCount < 2) {
            hideTarget('primary-guardian-count-warning');
            showTarget('add-primary-guardian');
            $("#add-primary-guardian").load('@Url.Action("GetAddPrimaryGuardian", "Application")');
            hideTarget('add-primary-guardian-button');
        }
        else {
            hideTarget('add-primary-guardian-button');
            showTarget('primary-guardian-count-warning');
        }
    }

    function loadSecondaryGuardianInfoForm() {
        var rowCount = $('#secondary-guardians table tbody tr').length;
        if (rowCount < 2) {
            hideTarget('secondary-guardian-count-warning');
            showTarget('add-secondary-guardian');
            $("#add-secondary-guardian").load('@Url.Action("GetAddSecondaryGuardian", "Application")');
            hideTarget('add-secondary-guardian-button');
        }
        else {
            hideTarget('add-secondary-guardian-button');
            showTarget('secondary-guardian-count-warning');
        }
    }

    function loadEmergencyContactInfoForm() {
        var rowCount = $('#emergency-contacts-table tbody tr').length;
        if (rowCount < 4) {
            hideTarget('emergency-count-warning');
            showTarget('add-emergency-contact');
            $("#add-emergency-contact").load('@Url.Action("GetAddEmergencyContact", "Application")');
            hideTarget('add-emergency-contact-button');
        }
        else {
            hideTarget('add-emergency-contact-button');
            showTarget('emergency-count-warning');
        }
    }

    function loadSiblingInfoForm() {
        var rowCount = $('#siblings-table tbody tr').length;
        if (rowCount < 6) {
            hideTarget('sibling-count-warning');
            showTarget('add-sibling');
            $("#add-sibling").load('@Url.Action("GetAddSibling", "Application")');
            hideTarget('add-sibling-button');
        }
        else {
            hideTarget('add-sibling');
            showTarget('sibling-count-warning');
        }

    }

    function loadHomelessInfoForm() {
        showTarget('homeless-container');
        $("#homeless-information").load('@Url.Action("GetAddHomelessAssistanceForm", "Application")');
    }

    /* DELETE FUNCTIONS */
    function deleteEmergencyContact(fieldId) {
        $.ajax({
            type: "POST",
            url: '/Application/DeleteEmergencyContact',
            data: { 'fieldId': fieldId },
            success: $('#ec_' + fieldId).remove()
        });
        var toUpdate = $('input[type=hidden][name="emergency-selection"]');
        emergencyContacts.pop();
        toUpdate.val(emergencyContacts);

        trackFormProgress();
    }

    function deleteGuardian(fieldId, type) {
        $.ajax({
            type: "POST",
            url: '/Application/DeleteGuardian',
            data: { 'fieldId': fieldId },
            success: $('#guardian_'+fieldId).remove()
        });

        var toUpdate = $('input[type=hidden][name="' + type + '-guardian-selection"]');
        if (type == "primary") {
            primaryGuardian.pop();
            toUpdate.val(primaryGuardian);
        } else {
            secondaryGuardian.pop();
            toUpdate.val(secondaryGuardian);
        }

        trackFormProgress();
    }

    function deleteSibling(fieldId) {
        $.ajax({
            type: "POST",
            url: '/Application/DeleteSibling',
            data: { 'fieldId': fieldId },
            success: $('#sibling_' + fieldId).remove()
        });
    }

</script>