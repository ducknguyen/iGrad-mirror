@model IGrad.Models.User.UserModel
@{
    /**/

    ViewBag.Title = "GetHouseholdForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript" src="~/Scripts/application.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js" type="text/javascript"></script>
<script type="text/javascript">

    $(document).on('click', '.remove-primary-guardian', function () {
        showTarget('add-primary-guardian-button');
    })

    $(document).on('click', '.remove-primary-guardian', function () {
        showTarget('add-secondary-guardian-button');
    })

    $(document).ready(function () {
        homelessToggled();
        residentIsMailingAddress();
    })

    function residentIsMailingAddress() {
        if ($('input[name=ResidentAddressIsMailingAddress]:checked').val() == 'True') {
            hideTarget('mailing-address');
        } else {
            showTarget('mailing-address');
        }
    }
    function loadEmergencyContactInfoForm() {
        hideTarget('add-emergency-contact-button');
        showTarget('add-emergency-contact'); 110
        $("#add-emergency-contact").load('@Url.Action("GetAddEmergencyContact", "Application")');
    }

    function loadPrimaryGuardianInfoForm() {
        var rowCount = $('#primary-guardians table tbody tr').length;
        if (rowCount < 2) {
            hideTarget('primary-guardian-count-warning');
            showTarget('add-primary-guardian');
            $("#add-primary-guardian").load('@Url.Action("GetAddPrimaryGuardian", "Application")');
        }
        else {
            hideTarget('add-primary-guardian-button');
            showTarget('primary-guardian-count-warning')
        }
    }

    function loadSecondaryGuardianInfoForm() {
        var rowCount = $('#secondary-guardians table tbody tr').length;
        if (rowCount < 2) {
            hideTarget('secondary-guardian-count-warning');
            showTarget('add-secondary-guardian');
            $("#add-secondary-guardian").load('@Url.Action("GetAddSecondaryGuardian", "Application")');
        }
        else {
            hideTarget('add-secondary-guardian-button');
            showTarget('secondary-guardian-count-warning');
        }
    }

    function loadSiblingInfoForm() {
        hideTarget('add-sibling-button');
        showTarget('add-sibling');
        $("#add-sibling").load('@Url.Action("GetAddSibling", "Application")');
    }

    function loadHomelessInfoForm() {
        showTarget('homeless-container');
        $("#homeless-information").load('@Url.Action("GetAddHomelessAssistanceForm", "Application")');
    }

    function homelessToggled() {
        if ($('#isHomelessCheckbox').is(':checked')) {
            loadHomelessInfoForm();
            showTarget('homeless-container');
            showTarget('homeless-information');
            console.log("ishomeless is checked");
        }
        else {
            hideTarget('homeless-container')
        }
    }

    function deleteEmergencyContact(fieldId) {
        $.ajax({
            type: "POST",
            url: '/Application/DeleteEmergencyContact',
            data: { 'fieldId': fieldId },
            success: $('#ec_' + fieldId).remove()
        });
    }

    function deleteGuardian(fieldId) {
        $.ajax({
            type: "POST",
            url: '/Application/DeleteGuardian',
            data: { 'fieldId': fieldId },
            success: $('#guardian_'+fieldId).remove()
        });
    }

    function deleteSibling(fieldId) {
        $.ajax({
            type: "POST",
            url: '/Application/DeleteSibling',
            data: { 'fieldId': fieldId },
            success: $('#sibling_' + fieldId).remove()
        });
    }

</script>
@using (Html.BeginForm("GetHouseholdForm", "Application", FormMethod.Post, new { enctype = "multipart/form-data", @id = "household-form" }))
{
    <h3>Household Information</h3>
    <small class="form-text required-marker-indicator">* required fields.</small>
    <hr>

    <div class="" id="living-situation">
        <h4 class="bg-info">Household</h4>
        <h5 class="required-marker">Household</h5>

        <div class="row">
            <div class="form-group col-md-2">
                <p>@Html.CheckBoxFor(model => model.LivesWith.LivesWithBothParents, htmlAttributes: new { @class = "" }) Both Parents</p>
            </div>
            <div class="form-group col-md-2">
                <p>@Html.CheckBoxFor(model => model.LivesWith.LivesWithMotherOnly, htmlAttributes: new { @class = "" }) Mother Only</p>
            </div>
            <div class="form-group col-md-2">
                <p>@Html.CheckBoxFor(model => model.LivesWith.LivesWithFatherOnly, htmlAttributes: new { @class = "" }) Father Only</p>
            </div>
        </div>

        <div class="row">
            <div class="form-group col-md-2">
                <p>@Html.CheckBoxFor(model => model.LivesWith.LivesWithGrandparents, htmlAttributes: new { @class = "" }) Grandparents</p>
            </div>
            <div class="form-group col-md-2">
                <p>@Html.CheckBoxFor(model => model.LivesWith.LivesWithSelf, htmlAttributes: new { @class = "" }) Own Residence</p>
            </div>
            <div class="form-group col-md-2">
                <p>@Html.CheckBoxFor(model => model.LivesWith.HomelessDistressed, htmlAttributes: new { @class = "", @id = "isHomelessCheckbox", @onclick = "homelessToggled()" }) Homeless / Distressed</p>
            </div>
        </div>



        <div class="row">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.LivesWith.TotalPeopleInResidence, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.LivesWith.TotalPeopleInResidence, "{0:#.#}", htmlAttributes: new { @class = "form-control", @placeholder = "Number of residence" })
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.LivesWith.AnnualHouseHoldIncome, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.LivesWith.AnnualHouseHoldIncome, "{0:#.#}", htmlAttributes: new { @class = "form-control", @placeholder = "Income" })
            </div>
        </div>

        <h4 class="bg-info">Primary Residence</h4>
        <div class="row">
            <div class="form-group col-md-3">
                @Html.LabelFor(model => model.ResidentAddress.Street, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.ResidentAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "Street address" })
            </div>
            <div class="form-group col-md-3">
                @Html.LabelFor(model => model.ResidentAddress.City, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.ResidentAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "City" })
            </div>
            <div class="form-group col-md-2">
                @Html.LabelFor(model => model.ResidentAddress.State, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.ResidentAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "State" })
            </div>
            <div class="form-group col-md-2">
                @Html.LabelFor(model => model.ResidentAddress.Zip, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.ResidentAddress.Zip, "{0:#.#}", new { @class = "form-control", @placeholder = "Zip" })
                @Html.ValidationMessageFor(model => model.ResidentAddress.Zip, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-2">
                @Html.LabelFor(model => model.ResidentAddress.POBox, htmlAttributes: new { @class = "required-marker" })
                @Html.TextBoxFor(model => model.ResidentAddress.POBox, new { @class = "form-control", @placeholder = "PO" })
            </div>
        </div>


        @Html.LabelFor(model => model.ResidentAddressIsMailingAddress, htmlAttributes: new { @class = "required-marker" })
        <div class="row">
            <div class="form-group col-md-12">
                @Html.RadioButtonFor(model => model.ResidentAddressIsMailingAddress, true, htmlAttributes: new { @class = "", @onclick = "residentIsMailingAddress()" })Yes
                @Html.RadioButtonFor(model => model.ResidentAddressIsMailingAddress, false, htmlAttributes: new { @class = "", @onclick = "residentIsMailingAddress()" })No
            </div>
        </div>



        <div class="hidden" id="mailing-address">
            <h4>Please Specify Mailing Address</h4>
            <div class="row">
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MailingAddress.Street, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.MailingAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "Street address" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MailingAddress.City, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.MailingAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "City" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.MailingAddress.State, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.MailingAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "State" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.MailingAddress.Zip, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.MailingAddress.Zip, "{0:#.#}", new { @class = "form-control", @placeholder = "Zip" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.MailingAddress.POBox, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.MailingAddress.POBox, htmlAttributes: new { @class = "form-control", @placeholder = "PO Box" })
                </div>
            </div>
        </div>
    </div>
    <hr />
}

<!-- ADD PRIMARY GUARDIAN -->
<div class="container" id="add-primary-guardian-container">
    <h4 class="bg-info">Guardians At Primary Residence (No More Than 2)</h4>
    <div class="" id="primary-guardians">
        <!-- guardians partial view here-->
        @{if (Model.Guardians != null)
            {
                Html.RenderPartial("_GetGuardianInfo", Model.Guardians.ToList(), new ViewDataDictionary { { "ResidenceType", "Primary" } });
            }
        }
    </div>
    <span class="text-warning hidden" id="primary-guardian-count-warning">Cannot have more than 2 guardians. Please delete a guardian to add a different one.</span>
    <button class="btn btn-primary" id="add-primary-guardian-button" type="button" onclick="loadPrimaryGuardianInfoForm()">Add Parent/Guardian</button>
    <div class="hidden" id="add-primary-guardian">
    </div>
</div>


<div class="" id="prompt-secondary-residence">
    <hr />
    <h4 class="bg-info">Secondary Residence</h4>
    <strong>Does the student have a parent/legal guardian not living at the address above?</strong>
    <br />
    <div class="container">
        <button class="btn btn-primary" type="button" onclick="showTarget('secondary-residence-container')">Yes</button>
        <button class="btn " value="" type="button" onclick="hideTarget('secondary-residence-container')">No</button>
    </div>
    <br />
    <div class="container hidden" id="secondary-residence-container">
        <div class="row">
            <div class="row">
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.SecondaryHouseholdAddress.Street, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.SecondaryHouseholdAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "Street address", @form = "household-form" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.SecondaryHouseholdAddress.City, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.SecondaryHouseholdAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "City", @form = "household-form" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.SecondaryHouseholdAddress.State, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.SecondaryHouseholdAddress.Street, htmlAttributes: new { @class = "form-control", @placeholder = "State", @form = "household-form" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.SecondaryHouseholdAddress.Zip, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.SecondaryHouseholdAddress.Zip, "{0:#.#}", new { @class = "form-control", @placeholder = "Zip", @form = "household-form" })
                    @Html.ValidationMessageFor(model => model.SecondaryHouseholdAddress.Zip, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.SecondaryHouseholdAddress.POBox, htmlAttributes: new { @class = "required-marker" })
                    @Html.TextBoxFor(model => model.SecondaryHouseholdAddress.POBox, new { @class = "form-control", @placeholder = "PO", @form = "household-form" })
                </div>
            </div>
        </div>

        <!-- ADD SECONDARY GUARDIAN -->
        <div class="container" id="add-secondary-guardian-container">
            <h4 class="bg-info">Guardians At Secondary Residence (No More Than 2)</h4>
            <div class="" id="secondary-guardians">
                <!-- guardians partial view here-->
                @{if (Model.Guardians != null)
                    {
                        Html.RenderPartial("_GetGuardianInfo", Model.Guardians.ToList(), new ViewDataDictionary { { "ResidenceType", "Secondary" } });
                    }
                }
            </div>
            <span class="text-warning hidden" id="secondary-guardian-count-warning">Cannot have more than 2 guardians. Please delete a guardian to add a different one.</span>
            <button class="btn btn-primary" id="add-secondary-guardian-button" onclick="loadSecondaryGuardianInfoForm()">Add Parent/Guardian</button>
            <div class="hidden" id="add-secondary-guardian">
            </div>
        </div>
    </div>
</div>
<hr />

<div class="container" id="homeless-container">
    <h3>Homeless / Distressed Additional Information</h3>
    <button class="btn btn-default" form="" type="button" onclick="showTarget('homeless-information')">Show</button>
    <button class="btn btn-default" form="" type="button" onclick="hideTarget('homeless-information')">Hide</button>
    <div class="container" id="homeless-information">
        @{if (Model.HomelessAssistance != null)
            {
                Html.RenderPartial("_HomelessAssistanceForm", Model.HomelessAssistance);
            }
            else
            {
                @Html.Action("GetAddHomelessAssistanceForm", "Application");
            }
        }
    </div>
    <hr />
</div>


<!-- ADD EMERGENCY CONTACT -->
<div class="wrapper" id="add-emergency-contact-container">
    <h4 class="bg-info">Emergency Contacts (Provide 3)</h4>
    <div class="" id="emergency-contacts">
        <!-- emergency partial view here-->
        @{if (Model.EmergencyContacts != null)
            {
                Html.RenderPartial("_GetEmergencyContacts", Model.EmergencyContacts.ToList());
            }
        }
    </div>
    <div class="" id="add-emergency-contact">
    </div>
    <button class="btn btn-primary" id="add-emergency-contact-button" onclick="loadEmergencyContactInfoForm()">Add Emergency Contact</button>
</div>

<br /><br />

@*<!-- ADD GUARDIAN -->
    <div class="wrapper" id="add-guardian-container">
        <h4 class="bg-info">Guardians</h4>
        <div class="" id="guardians">
            <!-- guardians partial view here-->
            @{if (Model.Guardians != null)
            {
            Html.RenderPartial("_GetGuardianInfo", Model.Guardians.ToList());
            }
            }
        </div>
        <button class="btn btn-primary" id="add-guardian-button" onclick="loadGuardianInfoForm()">Add Parent/Guardian</button>
        <div class="hidden" id="add-guardian">
        </div>
    </div>*@

<br /><br />

<!-- ADD SIBLINGS -->
<div class="wrapper" id="add-sibling-container">
    <h4 class="bg-info">Siblings</h4>
    <div class="siblings" id="siblings">
        <!-- sibling partial view here-->
        @{if (Model.Siblings != null)
            {
                Html.RenderPartial("_GetSiblingInfo", Model.Siblings.ToList());
            }
        }
    </div>
    <button class="btn btn-primary" id="add-sibling-button" onclick="loadSiblingInfoForm()">Add Sibling</button>
    <div class="hidden" id="add-sibling">
    </div>
</div>


<div class="form-row">
    <div class="pull-right">
        <button class="btn btn-primary btn-lg btn-success" type="submit" form="household-form">
            Continue
            <i class="fas fa-caret-right"></i>
        </button>
    </div>
</div>

<br /><br />

